import type { BklarInstance } from "bklar";
import type {
  OpenAPIObject,
  ResponseObject,
  SchemaObject,
} from "openapi3-ts/oas31";
import { z } from "zod/v4";

function createSchemaName(
  path: string,
  method: string,
  type: "Body" | "Response" | "Params" | "Query",
  statusCode?: string
): string {
  const pathName = path.replace(/[\/:]/g, "_").replace(/^_/, "");
  const baseName = `${method.toUpperCase()}_${pathName}`;
  if (type === "Response") return `${baseName}_Response_${statusCode}`;
  return `${baseName}_${type}`;
}

export function generateOpenAPI(
  app: BklarInstance,
  config: any
): OpenAPIObject {
  const openApi: OpenAPIObject = {
    openapi: "3.1.0",
    info: {
      title: config.title || "bklar API",
      version: config.version || "1.0.0",
      description:
        config.description || "API documentation generated by @bklarjs/swagger",
    },
    paths: {},
    components: { schemas: {} },
  };

  if (!openApi.paths) {
    openApi.paths = {};
  }

  for (const route of app.routes) {
    const path =
      "/" +
      route.segments
        .map((s) => (s.startsWith(":") ? `{${s.slice(1)}}` : s))
        .join("/");
    if (!openApi.paths[path]) {
      openApi.paths[path] = {};
    }

    const method = route.method.toLowerCase();
    const operation: any = {
      summary: route.options.doc?.summary,
      description: route.options.doc?.description,
      tags: route.options.doc?.tags,
      parameters: [],
    };

    // --- Process Parameters using z.toJSONSchema ---
    if (route.options.schemas?.params) {
      const jsonSchema = z.toJSONSchema(route.options.schemas.params);
      if (jsonSchema.type === "object" && jsonSchema.properties) {
        for (const [key, prop] of Object.entries(jsonSchema.properties)) {
          operation.parameters.push({
            name: key,
            in: "path",
            required: true,
            schema: prop,
          });
        }
      }
    }
    if (route.options.schemas?.query) {
      const jsonSchema = z.toJSONSchema(route.options.schemas.query);
      if (jsonSchema.type === "object" && jsonSchema.properties) {
        for (const [key, prop] of Object.entries(jsonSchema.properties)) {
          operation.parameters.push({
            name: key,
            in: "query",
            schema: prop,
            required: jsonSchema.required?.includes(key),
          });
        }
      }
    }

    // --- Process Request Body using z.toJSONSchema ---
    if (route.options.schemas?.body) {
      const schemaName = createSchemaName(path, method, "Body");
      const jsonSchema = z.toJSONSchema(
        route.options.schemas.body
      ) as SchemaObject;
      openApi.components!.schemas![schemaName] = jsonSchema;
      operation.requestBody = {
        content: {
          "application/json": {
            schema: { $ref: `#/components/schemas/${schemaName}` },
          },
        },
      };
    }

    // --- Process Responses using z.toJSONSchema ---
    const processedResponses: { [statusCode: string]: ResponseObject } = {};
    const routeResponses = route.options.doc?.responses || {};

    for (const [statusCode, responseObject] of Object.entries(routeResponses)) {
      const content = responseObject.content?.["application/json"];
      const schemaOrZod = content?.schema;

      if (
        schemaOrZod &&
        typeof schemaOrZod === "object" &&
        "_def" in schemaOrZod
      ) {
        const schemaName = createSchemaName(
          path,
          method,
          "Response",
          statusCode
        );
        const jsonSchema = z.toJSONSchema(schemaOrZod) as SchemaObject;
        openApi.components!.schemas![schemaName] = jsonSchema;

        processedResponses[statusCode] = {
          ...responseObject,
          content: {
            "application/json": {
              schema: { $ref: `#/components/schemas/${schemaName}` },
            },
          },
        };
      } else {
        processedResponses[statusCode] = responseObject;
      }
    }

    operation.responses =
      Object.keys(processedResponses).length > 0
        ? processedResponses
        : { "200": { description: "OK" } };

    (openApi.paths[path] as any)[method] = operation;
  }

  return openApi;
}
