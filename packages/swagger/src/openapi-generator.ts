import { BklarApp } from "bklar";
import type { OpenAPIObject } from "openapi3-ts/oas31";
import { zodToJsonSchema } from "zod-to-json-schema";

function pathToOpenAPI(path: string[]): string {
  return (
    "/" +
    path
      .map((segment) =>
        segment.startsWith(":") ? `{${segment.slice(1)}}` : segment
      )
      .join("/")
  );
}

export function generateOpenAPI(app: BklarApp, config: any): OpenAPIObject {
  const openApi: OpenAPIObject = {
    openapi: "3.1.0",
    info: {
      title: config.title || "bklar API",
      version: config.version || "1.0.0",
      description:
        config.description || "API documentation generated by @bklarjs/swagger",
    },
    paths: {},
    components: { schemas: {} },
  };

  for (const route of app.router.routes) {
    const path = pathToOpenAPI(route.segments);
    if (!openApi.paths[path]) {
      openApi.paths[path] = {};
    }

    const method = route.method.toLowerCase();

    const operation: any = {
      summary: route.options.doc?.summary,
      description: route.options.doc?.description,
      tags: route.options.doc?.tags,
      parameters: [],
      responses: route.options.doc?.responses || {
        "200": { description: "OK" },
      },
    };

    // Parameters (path & query)
    if (route.options.schemas?.params) {
      const schema = zodToJsonSchema(route.options.schemas.params);
      for (const [key, prop] of Object.entries(schema.properties || {})) {
        operation.parameters.push({
          name: key,
          in: "path",
          required: true,
          schema: prop,
        });
      }
    }
    if (route.options.schemas?.query) {
      const schema = zodToJsonSchema(route.options.schemas.query);
      for (const [key, prop] of Object.entries(schema.properties || {})) {
        operation.parameters.push({
          name: key,
          in: "query",
          schema: prop,
        });
      }
    }

    // Request Body
    if (route.options.schemas?.body) {
      const schemaName = `${method.toUpperCase()}${path.replace(
        /[\/:]/g,
        "_"
      )}Body`;
      openApi.components.schemas[schemaName] = zodToJsonSchema(
        route.options.schemas.body
      );
      operation.requestBody = {
        content: {
          "application/json": {
            schema: { $ref: `#/components/schemas/${schemaName}` },
          },
        },
      };
    }

    openApi.paths[path][method] = operation;
  }

  return openApi;
}
